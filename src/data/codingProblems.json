
[
  {
    "id": 1,
    "title": "Two Sum",
    "difficulty": "Easy",
    "tags": ["Array", "Hash Table"],
    "status": "Solved",
    "companies": ["Google", "Amazon", "Meta"],
    "description": "Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
    "defaultCode": {
      "javascript": "function twoSum(nums, target) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 2,
    "title": "Median of Two Sorted Arrays",
    "difficulty": "Hard",
    "tags": ["Array", "Binary Search"],
    "status": "To Do",
    "companies": ["Google", "Microsoft", "Apple"],
    "description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays.\n\nThe overall run time complexity should be O(log (m+n)).",
    "defaultCode": {
      "javascript": "function findMedianSortedArrays(nums1, nums2) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        // Write your code here\n        return 0.0;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    double findMedianSortedArrays(std::vector<int>& nums1, std::vector<int>& nums2) {\n        // Write your code here\n        return 0.0;\n    }\n};"
    }
  },
  {
    "id": 3,
    "title": "Longest Substring Without Repeating Characters",
    "difficulty": "Medium",
    "tags": ["String", "Sliding Window", "Hash Table"],
    "status": "Attempted",
    "companies": ["Amazon", "Microsoft", "Adobe"],
    "description": "Given a string `s`, find the length of the longest substring without repeating characters.",
    "defaultCode": {
      "javascript": "function lengthOfLongestSubstring(s) {\n  // Write your code here\n}",
      "python": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "#include <string>\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(std::string s) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 4,
    "title": "Container With Most Water",
    "difficulty": "Medium",
    "tags": ["Array", "Two Pointers"],
    "status": "To Do",
    "companies": ["Google", "Bloomberg"],
    "description": "You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`-th line are `(i, 0)` and `(i, height[i])`.\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.",
    "defaultCode": {
      "javascript": "function maxArea(height) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def maxArea(self, height: List[int]) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int maxArea(int[] height) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    int maxArea(std::vector<int>& height) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 5,
    "title": "3Sum",
    "difficulty": "Medium",
    "tags": ["Array", "Sorting", "Two Pointers"],
    "status": "To Do",
    "companies": ["Amazon", "Meta", "Microsoft"],
    "description": "Given an integer array `nums`, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.\n\nNotice that the solution set must not contain duplicate triplets.",
    "defaultCode": {
      "javascript": "function threeSum(nums) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        # Write your code here\n        pass",
      "java": "import java.util.List;\n\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    std::vector<std::vector<int>> threeSum(std::vector<int>& nums) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 6,
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "tags": ["Stack", "String"],
    "status": "Solved",
    "companies": ["Google", "Amazon", "Uber"],
    "description": "Given a string `s` containing just the characters `(`, `)`, `{`, `}`, `[` and `]`, determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.",
    "defaultCode": {
      "javascript": "function isValid(s) {\n  // Write your code here\n}",
      "python": "class Solution:\n    def isValid(self, s: str) -> bool:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public boolean isValid(String s) {\n        // Write your code here\n        return false;\n    }\n}",
      "cpp": "#include <string>\n\nclass Solution {\npublic:\n    bool isValid(std::string s) {\n        // Write your code here\n        return false;\n    }\n};"
    }
  },
  {
    "id": 7,
    "title": "Merge K Sorted Lists",
    "difficulty": "Hard",
    "tags": ["Linked List", "Heap"],
    "status": "To Do",
    "companies": ["Amazon", "Google", "Meta"],
    "description": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.\n\nMerge all the linked-lists into one sorted linked-list and return it.",
    "defaultCode": {
      "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction mergeKLists(lists) {\n  // Write your code here\n}",
      "python": "from typing import List, Optional\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\n// Definition for singly-linked list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeKLists(std::vector<ListNode*>& lists) {\n        // Write your code here\n        return nullptr;\n    }\n};"
    }
  },
  {
    "id": 8,
    "title": "Top K Frequent Elements",
    "difficulty": "Medium",
    "tags": ["Heap", "Hash Table", "Array"],
    "status": "Attempted",
    "companies": ["Meta", "Amazon", "Netflix"],
    "description": "Given an integer array `nums` and an integer `k`, return the `k` most frequent elements. You may return the answer in any order.",
    "defaultCode": {
      "javascript": "function topKFrequent(nums, k) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    std::vector<int> topKFrequent(std::vector<int>& nums, int k) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 9,
    "title": "Longest Palindromic Substring",
    "difficulty": "Medium",
    "tags": ["String", "Dynamic Programming"],
    "status": "Solved",
    "companies": ["Amazon", "Microsoft"],
    "description": "Given a string `s`, return the longest palindromic substring in `s`.",
    "defaultCode": {
      "javascript": "function longestPalindrome(s) {\n  // Write your code here\n}",
      "python": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public String longestPalindrome(String s) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <string>\n\nclass Solution {\npublic:\n    std::string longestPalindrome(std::string s) {\n        // Write your code here\n        return \"\";\n    }\n};"
    }
  },
  {
    "id": 10,
    "title": "Product of Array Except Self",
    "difficulty": "Medium",
    "tags": ["Array"],
    "status": "To Do",
    "companies": ["Amazon", "Microsoft", "Meta"],
    "description": "Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`.\n\nThe product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.\n\nYou must write an algorithm that runs in O(n) time and without using the division operation.",
    "defaultCode": {
      "javascript": "function productExceptSelf(nums) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    std::vector<int> productExceptSelf(std::vector<int>& nums) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 11,
    "title": "Maximum Subarray",
    "difficulty": "Easy",
    "tags": ["Array", "Dynamic Programming"],
    "status": "To Do",
    "companies": ["Google", "Microsoft", "Amazon"],
    "description": "Given an integer array `nums`, find the subarray with the largest sum, and return its sum.",
    "defaultCode": {
      "javascript": "function maxSubArray(nums) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int maxSubArray(int[] nums) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    int maxSubArray(std::vector<int>& nums) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 12,
    "title": "Best Time to Buy and Sell Stock",
    "difficulty": "Easy",
    "tags": ["Array", "Dynamic Programming"],
    "status": "To Do",
    "companies": ["Amazon", "Meta", "Apple"],
    "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `i`-th day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "defaultCode": {
      "javascript": "function maxProfit(prices) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int maxProfit(int[] prices) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    int maxProfit(std::vector<int>& prices) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 13,
    "title": "Contains Duplicate",
    "difficulty": "Easy",
    "tags": ["Array", "Hash Table"],
    "status": "To Do",
    "companies": ["Amazon", "Apple", "Microsoft"],
    "description": "Given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.",
    "defaultCode": {
      "javascript": "function containsDuplicate(nums) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        // Write your code here\n        return false;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    bool containsDuplicate(std::vector<int>& nums) {\n        // Write your code here\n        return false;\n    }\n};"
    }
  },
  {
    "id": 14,
    "title": "Group Anagrams",
    "difficulty": "Medium",
    "tags": ["String", "Hash Table", "Sorting"],
    "status": "To Do",
    "companies": ["Amazon", "Meta", "Google"],
    "description": "Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "defaultCode": {
      "javascript": "function groupAnagrams(strs) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        # Write your code here\n        pass",
      "java": "import java.util.List;\n\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n#include <string>\n\nclass Solution {\npublic:\n    std::vector<std::vector<std::string>> groupAnagrams(std::vector<std::string>& strs) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 15,
    "title": "Reverse Linked List",
    "difficulty": "Easy",
    "tags": ["Linked List"],
    "status": "To Do",
    "companies": ["Amazon", "Microsoft", "Apple"],
    "description": "Given the `head` of a singly linked list, reverse the list, and return the reversed list.",
    "defaultCode": {
      "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction reverseList(head) {\n  // Write your code here\n}",
      "python": "from typing import Optional\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "// Definition for singly-linked list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        // Write your code here\n        return nullptr;\n    }\n};"
    }
  },
  {
    "id": 16,
    "title": "Merge Two Sorted Lists",
    "difficulty": "Easy",
    "tags": ["Linked List"],
    "status": "To Do",
    "companies": ["Amazon", "Microsoft", "Google"],
    "description": "You are given the heads of two sorted linked lists `list1` and `list2`.\n\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn the head of the merged linked list.",
    "defaultCode": {
      "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction mergeTwoLists(list1, list2) {\n  // Write your code here\n}",
      "python": "from typing import Optional\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "// Definition for singly-linked list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        // Write your code here\n        return nullptr;\n    }\n};"
    }
  },
  {
    "id": 17,
    "title": "Climbing Stairs",
    "difficulty": "Easy",
    "tags": ["Dynamic Programming"],
    "status": "To Do",
    "companies": ["Adobe", "Amazon", "Apple"],
    "description": "You are climbing a staircase. It takes `n` steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "defaultCode": {
      "javascript": "function climbStairs(n) {\n  // Write your code here\n}",
      "python": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int climbStairs(int n) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "class Solution {\npublic:\n    int climbStairs(int n) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 18,
    "title": "Longest Increasing Subsequence",
    "difficulty": "Medium",
    "tags": ["Dynamic Programming", "Array", "Binary Search"],
    "status": "To Do",
    "companies": ["Google", "Microsoft"],
    "description": "Given an integer array `nums`, return the length of the longest strictly increasing subsequence.",
    "defaultCode": {
      "javascript": "function lengthOfLIS(nums) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int lengthOfLIS(int[] nums) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    int lengthOfLIS(std::vector<int>& nums) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 19,
    "title": "Coin Change",
    "difficulty": "Medium",
    "tags": ["Dynamic Programming", "Array"],
    "status": "To Do",
    "companies": ["Amazon", "Google", "Bloomberg"],
    "description": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.\n\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\nYou may assume that you have an infinite number of each kind of coin.",
    "defaultCode": {
      "javascript": "function coinChange(coins, amount) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int coinChange(int[] coins, int amount) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    int coinChange(std::vector<int>& coins, int amount) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 20,
    "title": "Word Break",
    "difficulty": "Medium",
    "tags": ["Dynamic Programming", "String", "Trie"],
    "status": "To Do",
    "companies": ["Meta", "Amazon", "Google"],
    "description": "Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.\n\nNote that the same word in the dictionary may be reused multiple times in the segmentation.",
    "defaultCode": {
      "javascript": "function wordBreak(s, wordDict) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        # Write your code here\n        pass",
      "java": "import java.util.List;\n\nclass Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        // Write your code here\n        return false;\n    }\n}",
      "cpp": "#include <vector>\n#include <string>\n\nclass Solution {\npublic:\n    bool wordBreak(std::string s, std::vector<std::string>& wordDict) {\n        // Write your code here\n        return false;\n    }\n};"
    }
  },
  {
    "id": 21,
    "title": "Minimum Window Substring",
    "difficulty": "Hard",
    "tags": ["Sliding Window", "String", "Hash Table"],
    "status": "To Do",
    "companies": ["Amazon", "Meta", "Microsoft"],
    "description": "Given two strings `s` and `t` of lengths `m` and `n` respectively, return the minimum window substring of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such substring, return the empty string `\"\"`.",
    "defaultCode": {
      "javascript": "function minWindow(s, t) {\n  // Write your code here\n}",
      "python": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public String minWindow(String s, String t) {\n        // Write your code here\n        return \"\";\n    }\n}",
      "cpp": "#include <string>\n\nclass Solution {\npublic:\n    std::string minWindow(std::string s, std::string t) {\n        // Write your code here\n        return \"\";\n    }\n};"
    }
  },
  {
    "id": 22,
    "title": "Number of Islands",
    "difficulty": "Medium",
    "tags": ["Graph", "Array", "DFS", "BFS", "Matrix"],
    "status": "To Do",
    "companies": ["Amazon", "Google", "Microsoft"],
    "description": "Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return the number of islands.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "defaultCode": {
      "javascript": "function numIslands(grid) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int numIslands(char[][] grid) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    int numIslands(std::vector<std::vector<char>>& grid) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 23,
    "title": "Course Schedule",
    "difficulty": "Medium",
    "tags": ["Graph", "Topological Sort", "DFS"],
    "status": "To Do",
    "companies": ["Amazon", "Meta", "Google"],
    "description": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`.\n\nFor example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\nReturn `true` if you can finish all courses. Otherwise, return `false`.",
    "defaultCode": {
      "javascript": "function canFinish(numCourses, prerequisites) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        // Write your code here\n        return false;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    bool canFinish(int numCourses, std::vector<std::vector<int>>& prerequisites) {\n        // Write your code here\n        return false;\n    }\n};"
    }
  },
  {
    "id": 24,
    "title": "Clone Graph",
    "difficulty": "Medium",
    "tags": ["Graph", "Hash Table", "DFS", "BFS"],
    "status": "To Do",
    "companies": ["Meta", "Google", "Amazon"],
    "description": "Given a reference of a node in a connected undirected graph.\n\nReturn a deep copy (clone) of the graph.\n\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.",
    "defaultCode": {
      "javascript": "/**\n * // Definition for a Node.\n * function Node(val, neighbors) {\n *    this.val = val === undefined ? 0 : val;\n *    this.neighbors = neighbors === undefined ? [] : neighbors;\n * };\n */\n\nfunction cloneGraph(node) {\n  // Write your code here\n}",
      "python": "# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\nfrom typing import Optional\nclass Solution:\n    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:\n        # Write your code here\n        pass",
      "java": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        // Write your code here\n        return nullptr;\n    }\n};"
    }
  },
  {
    "id": 25,
    "title": "Invert Binary Tree",
    "difficulty": "Easy",
    "tags": ["Tree", "DFS", "BFS"],
    "status": "To Do",
    "companies": ["Google", "Amazon"],
    "description": "Given the root of a binary tree, invert the tree, and return its root.",
    "defaultCode": {
      "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction invertTree(root) {\n  // Write your code here\n}",
      "python": "from typing import Optional\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "// Definition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        // Write your code here\n        return nullptr;\n    }\n};"
    }
  },
  {
    "id": 26,
    "title": "Maximum Depth of Binary Tree",
    "difficulty": "Easy",
    "tags": ["Tree", "DFS", "BFS"],
    "status": "To Do",
    "companies": ["LinkedIn", "Apple", "Google"],
    "description": "Given the root of a binary tree, return its maximum depth.\n\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
    "defaultCode": {
      "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction maxDepth(root) {\n  // Write your code here\n}",
      "python": "from typing import Optional\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "// Definition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 27,
    "title": "Validate Binary Search Tree",
    "difficulty": "Medium",
    "tags": ["Tree", "DFS"],
    "status": "To Do",
    "companies": ["Amazon", "Microsoft", "Bloomberg"],
    "description": "Given the `root` of a binary tree, determine if it is a valid binary search tree (BST).\n\nA valid BST is defined as follows:\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees.",
    "defaultCode": {
      "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction isValidBST(root) {\n  // Write your code here\n}",
      "python": "from typing import Optional\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        // Write your code here\n        return false;\n    }\n}",
      "cpp": "// Definition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        // Write your code here\n        return false;\n    }\n};"
    }
  },
  {
    "id": 28,
    "title": "Kth Smallest Element in a BST",
    "difficulty": "Medium",
    "tags": ["Tree", "Binary Search"],
    "status": "To Do",
    "companies": ["Meta", "Amazon", "Google"],
    "description": "Given the `root` of a binary search tree, and an integer `k`, return the `k`th smallest value (1-indexed) of all the values of the nodes in the tree.",
    "defaultCode": {
      "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction kthSmallest(root, k) {\n  // Write your code here\n}",
      "python": "from typing import Optional\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int kthSmallest(TreeNode root, int k) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "// Definition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n\nclass Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 29,
    "title": "Lowest Common Ancestor of a Binary Tree",
    "difficulty": "Medium",
    "tags": ["Tree", "DFS"],
    "status": "To Do",
    "companies": ["Amazon", "Meta", "Microsoft"],
    "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).”",
    "defaultCode": {
      "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction lowestCommonAncestor(root, p, q) {\n  // Write your code here\n}",
      "python": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "// Definition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // Write your code here\n        return nullptr;\n    }\n};"
    }
  },
  {
    "id": 30,
    "title": "Implement Trie (Prefix Tree)",
    "difficulty": "Medium",
    "tags": ["Trie", "Design", "String"],
    "status": "To Do",
    "companies": ["Google", "Amazon", "Microsoft"],
    "description": "A trie (pronounced as 'try') or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n\nImplement the Trie class:\n- `Trie()` Initializes the trie object.\n- `void insert(String word)` Inserts the string `word` into the trie.\n- `boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.\n- `boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.",
    "defaultCode": {
      "javascript": "var Trie = function() {\n    \n};\n\nTrie.prototype.insert = function(word) {\n    \n};\n\nTrie.prototype.search = function(word) {\n    \n};\n\nTrie.prototype.startsWith = function(prefix) {\n    \n};\n",
      "python": "class Trie:\n\n    def __init__(self):\n        pass\n\n    def insert(self, word: str) -> None:\n        pass\n\n    def search(self, word: str) -> bool:\n        pass\n\n    def startsWith(self, prefix: str) -> bool:\n        pass\n",
      "java": "class Trie {\n\n    public Trie() {\n        \n    }\n    \n    public void insert(String word) {\n        \n    }\n    \n    public boolean search(String word) {\n        return false;\n    }\n    \n    public boolean startsWith(String prefix) {\n        return false;\n    }\n}",
      "cpp": "#include <string>\n\nclass Trie {\npublic:\n    Trie() {\n        \n    }\n    \n    void insert(std::string word) {\n        \n    }\n    \n    bool search(std::string word) {\n        return false;\n    }\n    \n    bool startsWith(std::string prefix) {\n        return false;\n    }\n};"
    }
  },
  {
    "id": 31,
    "title": "Subsets",
    "difficulty": "Medium",
    "tags": ["Backtracking", "Array"],
    "status": "To Do",
    "companies": ["Meta", "Amazon", "Bloomberg"],
    "description": "Given an integer array `nums` of unique elements, return all possible subsets (the power set).\n\nThe solution set must not contain duplicate subsets. Return the solution in any order.",
    "defaultCode": {
      "javascript": "function subsets(nums) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n        # Write your code here\n        pass",
      "java": "import java.util.List;\n\nclass Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    std::vector<std::vector<int>> subsets(std::vector<int>& nums) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 32,
    "title": "Combination Sum",
    "difficulty": "Medium",
    "tags": ["Backtracking", "Array"],
    "status": "To Do",
    "companies": ["Uber", "Airbnb", "Amazon"],
    "description": "Given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order.\n\nThe same number may be chosen from `candidates` an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.",
    "defaultCode": {
      "javascript": "function combinationSum(candidates, target) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        # Write your code here\n        pass",
      "java": "import java.util.List;\n\nclass Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    std::vector<std::vector<int>> combinationSum(std::vector<int>& candidates, int target) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 33,
    "title": "Permutations",
    "difficulty": "Medium",
    "tags": ["Backtracking", "Array"],
    "status": "To Do",
    "companies": ["Microsoft", "Amazon", "LinkedIn"],
    "description": "Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.",
    "defaultCode": {
      "javascript": "function permute(nums) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        # Write your code here\n        pass",
      "java": "import java.util.List;\n\nclass Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    std::vector<std::vector<int>> permute(std::vector<int>& nums) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 34,
    "title": "Word Search",
    "difficulty": "Medium",
    "tags": ["Backtracking", "Array", "Matrix"],
    "status": "To Do",
    "companies": ["Amazon", "Microsoft", "Meta"],
    "description": "Given an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
    "defaultCode": {
      "javascript": "function exist(board, word) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public boolean exist(char[][] board, String word) {\n        // Write your code here\n        return false;\n    }\n}",
      "cpp": "#include <vector>\n#include <string>\n\nclass Solution {\npublic:\n    bool exist(std::vector<std::vector<char>>& board, std::string word) {\n        // Write your code here\n        return false;\n    }\n};"
    }
  },
  {
    "id": 35,
    "title": "Find Median from Data Stream",
    "difficulty": "Hard",
    "tags": ["Heap", "Design"],
    "status": "To Do",
    "companies": ["Google", "Meta", "Amazon"],
    "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\nImplement the MedianFinder class:\n- `MedianFinder()` initializes the MedianFinder object.\n- `void addNum(int num)` adds the integer `num` from the data stream to the data structure.\n- `double findMedian()` returns the median of all elements so far.",
    "defaultCode": {
      "javascript": "var MedianFinder = function() {\n    \n};\n\nMedianFinder.prototype.addNum = function(num) {\n    \n};\n\nMedianFinder.prototype.findMedian = function() {\n    \n};\n",
      "python": "class MedianFinder:\n\n    def __init__(self):\n        pass\n\n    def addNum(self, num: int) -> None:\n        pass\n\n    def findMedian(self) -> float:\n        pass\n",
      "java": "class MedianFinder {\n\n    public MedianFinder() {\n        \n    }\n    \n    public void addNum(int num) {\n        \n    }\n    \n    public double findMedian() {\n        return 0.0;\n    }\n}",
      "cpp": "class MedianFinder {\npublic:\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        \n    }\n    \n    double findMedian() {\n        return 0.0;\n    }\n};"
    }
  },
  {
    "id": 36,
    "title": "Valid Palindrome",
    "difficulty": "Easy",
    "tags": ["Two Pointers", "String"],
    "status": "To Do",
    "companies": ["Meta", "Microsoft", "Uber"],
    "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string `s`, return `true` if it is a palindrome, or `false` otherwise.",
    "defaultCode": {
      "javascript": "function isPalindrome(s) {\n  // Write your code here\n}",
      "python": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public boolean isPalindrome(String s) {\n        // Write your code here\n        return false;\n    }\n}",
      "cpp": "#include <string>\n\nclass Solution {\npublic:\n    bool isPalindrome(std::string s) {\n        // Write your code here\n        return false;\n    }\n};"
    }
  },
  {
    "id": 37,
    "title": "Min Stack",
    "difficulty": "Medium",
    "tags": ["Stack", "Design"],
    "status": "To Do",
    "companies": ["Amazon", "Google", "Bloomberg"],
    "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nImplement the MinStack class:\n- `MinStack()` initializes the stack object.\n- `void push(int val)` pushes the element `val` onto the stack.\n- `void pop()` removes the element on the top of the stack.\n- `int top()` gets the top element of the stack.\n- `int getMin()` retrieves the minimum element in the stack.",
    "defaultCode": {
      "javascript": "var MinStack = function() {\n    \n};\n\nMinStack.prototype.push = function(val) {\n    \n};\n\nMinStack.prototype.pop = function() {\n    \n};\n\nMinStack.prototype.top = function() {\n    \n};\n\nMinStack.prototype.getMin = function() {\n    \n};\n",
      "python": "class MinStack:\n\n    def __init__(self):\n        pass\n\n    def push(self, val: int) -> None:\n        pass\n\n    def pop(self) -> None:\n        pass\n\n    def top(self) -> int:\n        pass\n\n    def getMin(self) -> int:\n        pass\n",
      "java": "class MinStack {\n\n    public MinStack() {\n        \n    }\n    \n    public void push(int val) {\n        \n    }\n    \n    public void pop() {\n        \n    }\n    \n    public int top() {\n        return 0;\n    }\n    \n    public int getMin() {\n        return 0;\n    }\n}",
      "cpp": "class MinStack {\npublic:\n    MinStack() {\n        \n    }\n    \n    void push(int val) {\n        \n    }\n    \n    void pop() {\n        \n    }\n    \n    int top() {\n        return 0;\n    }\n    \n    int getMin() {\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 38,
    "title": "Search in Rotated Sorted Array",
    "difficulty": "Medium",
    "tags": ["Array", "Binary Search"],
    "status": "To Do",
    "companies": ["Meta", "Amazon", "Microsoft"],
    "description": "There is an integer array `nums` sorted in ascending order (with distinct values).\n\nPrior to being passed to your function, `nums` is possibly rotated at an unknown pivot index `k`.\n\nGiven the array `nums` after the possible rotation and an integer `target`, return the index of `target` if it is in `nums`, or -1 if it is not in `nums`.\n\nYou must write an algorithm with O(log n) runtime complexity.",
    "defaultCode": {
      "javascript": "function search(nums, target) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int search(int[] nums, int target) {\n        // Write your code here\n        return -1;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    int search(std::vector<int>& nums, int target) {\n        // Write your code here\n        return -1;\n    }\n};"
    }
  },
  {
    "id": 39,
    "title": "Longest Repeating Character Replacement",
    "difficulty": "Medium",
    "tags": ["Sliding Window", "String", "Hash Table"],
    "status": "To Do",
    "companies": ["Amazon", "Google"],
    "description": "You are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times.\n\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.",
    "defaultCode": {
      "javascript": "function characterReplacement(s, k) {\n  // Write your code here\n}",
      "python": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int characterReplacement(String s, int k) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "#include <string>\n\nclass Solution {\npublic:\n    int characterReplacement(std::string s, int k) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 40,
    "title": "Remove Nth Node From End of List",
    "difficulty": "Medium",
    "tags": ["Linked List", "Two Pointers"],
    "status": "To Do",
    "companies": ["Amazon", "Meta", "Google"],
    "description": "Given the `head` of a linked list, remove the `n`th node from the end of the list and return its head.",
    "defaultCode": {
      "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction removeNthFromEnd(head, n) {\n  // Write your code here\n}",
      "python": "from typing import Optional\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "// Definition for singly-linked list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        // Write your code here\n        return nullptr;\n    }\n};"
    }
  },
  {
    "id": 41,
    "title": "Reorder List",
    "difficulty": "Medium",
    "tags": ["Linked List", "Two Pointers", "Stack"],
    "status": "To Do",
    "companies": ["Meta", "Amazon"],
    "description": "You are given the head of a singly linked-list. The list can be represented as: L0 → L1 → … → Ln - 1 → Ln\n\nReorder the list to be on the following form: L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.",
    "defaultCode": {
      "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction reorderList(head) {\n  // Write your code here\n}",
      "python": "from typing import Optional\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        # Do not return anything, modify head in-place instead.\n        pass",
      "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public void reorderList(ListNode head) {\n        // Do not return anything, modify head in-place instead.\n    }\n}",
      "cpp": "// Definition for singly-linked list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    void reorderList(ListNode* head) {\n        // Do not return anything, modify head in-place instead.\n    }\n};"
    }
  },
  {
    "id": 42,
    "title": "Linked List Cycle",
    "difficulty": "Easy",
    "tags": ["Linked List", "Hash Table", "Two Pointers"],
    "status": "To Do",
    "companies": ["Amazon", "Microsoft", "Apple"],
    "description": "Given `head`, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as a parameter.\n\nReturn `true` if there is a cycle in the linked list. Otherwise, return `false`.",
    "defaultCode": {
      "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\nfunction hasCycle(head) {\n  // Write your code here\n}",
      "python": "from typing import Optional\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        // Write your code here\n        return false;\n    }\n}",
      "cpp": "// Definition for singly-linked list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        // Write your code here\n        return false;\n    }\n};"
    }
  },
  {
    "id": 43,
    "title": "Kth Largest Element in an Array",
    "difficulty": "Medium",
    "tags": ["Heap", "Sorting", "Array"],
    "status": "To Do",
    "companies": ["Meta", "Amazon", "Apple"],
    "description": "Given an integer array `nums` and an integer `k`, return the `k`th largest element in the array.\n\nNote that it is the `k`th largest element in the sorted order, not the `k`th distinct element.",
    "defaultCode": {
      "javascript": "function findKthLargest(nums, k) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    int findKthLargest(std::vector<int>& nums, int k) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 44,
    "title": "House Robber",
    "difficulty": "Medium",
    "tags": ["Dynamic Programming", "Array"],
    "status": "To Do",
    "companies": ["Google", "Amazon", "LinkedIn"],
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\n\nGiven an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
    "defaultCode": {
      "javascript": "function rob(nums) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int rob(int[] nums) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    int rob(std::vector<int>& nums) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 45,
    "title": "Unique Paths",
    "difficulty": "Medium",
    "tags": ["Dynamic Programming", "Matrix", "Math"],
    "status": "To Do",
    "companies": ["Amazon", "Google", "Microsoft"],
    "description": "There is a robot on an `m x n` grid. The robot is initially located at the top-left corner (i.e., `grid[0][0]`). The robot tries to move to the bottom-right corner (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.\n\nGiven the two integers `m` and `n`, return the number of possible unique paths that the robot can take to reach the bottom-right corner.",
    "defaultCode": {
      "javascript": "function uniquePaths(m, n) {\n  // Write your code here\n}",
      "python": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int uniquePaths(int m, int n) {\n        // Write your code here\n        return 0;\n    }\n}",
      "cpp": "class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        // Write your code here\n        return 0;\n    }\n};"
    }
  },
  {
    "id": 46,
    "title": "Valid Anagram",
    "difficulty": "Easy",
    "tags": ["String", "Hash Table", "Sorting"],
    "status": "To Do",
    "companies": ["Amazon", "Uber", "Bloomberg"],
    "description": "Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "defaultCode": {
      "javascript": "function isAnagram(s, t) {\n  // Write your code here\n}",
      "python": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public boolean isAnagram(String s, String t) {\n        // Write your code here\n        return false;\n    }\n}",
      "cpp": "#include <string>\n\nclass Solution {\npublic:\n    bool isAnagram(std::string s, std::string t) {\n        // Write your code here\n        return false;\n    }\n};"
    }
  },
  {
    "id": 47,
    "title": "Merge Intervals",
    "difficulty": "Medium",
    "tags": ["Array", "Sorting"],
    "status": "To Do",
    "companies": ["Meta", "Google", "Amazon"],
    "description": "Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "defaultCode": {
      "javascript": "function merge(intervals) {\n  // Write your code here\n}",
      "python": "from typing import List\n\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        # Write your code here\n        pass",
      "java": "class Solution {\n    public int[][] merge(int[][] intervals) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    std::vector<std::vector<int>> merge(std::vector<std::vector<int>>& intervals) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 48,
    "title": "Binary Tree Level Order Traversal",
    "difficulty": "Medium",
    "tags": ["Tree", "BFS"],
    "status": "To Do",
    "companies": ["Amazon", "Meta", "Microsoft"],
    "description": "Given the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
    "defaultCode": {
      "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\nfunction levelOrder(root) {\n  // Write your code here\n}",
      "python": "from typing import Optional, List\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        # Write your code here\n        pass",
      "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.List;\n\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\n// Definition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n\nclass Solution {\npublic:\n    std::vector<std::vector<int>> levelOrder(TreeNode* root) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 49,
    "title": "Serialize and Deserialize Binary Tree",
    "difficulty": "Hard",
    "tags": ["Tree", "Design", "String", "DFS", "BFS"],
    "status": "To Do",
    "companies": ["Google", "Meta", "Amazon"],
    "description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.",
    "defaultCode": {
      "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    \n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    \n};\n",
      "python": "# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        ",
      "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        return \"\";\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        return null;\n    }\n}",
      "cpp": "#include <string>\n\n// Definition for a binary tree node.\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    std::string serialize(TreeNode* root) {\n        \n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(std::string data) {\n        \n    }\n};"
    }
  },
  {
    "id": 50,
    "title": "Pacific Atlantic Water Flow",
    "difficulty": "Medium",
    "tags": ["Graph", "Matrix", "DFS", "BFS"],
    "status": "To Do",
    "companies": ["Google", "Amazon", "Meta"],
    "description": "There is an `m x n` rectangular island that borders both the Pacific Ocean and the Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n\nThe island is partitioned into a grid of square cells. You are given an `m x n` integer matrix `heights` where `heights[r][c]` represents the height above sea level of the cell at coordinate `(r, c)`.\n\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n\nReturn a 2D list of grid coordinates `result` where `result[i] = [ri, ci]` denotes that rain water can flow from cell `(ri, ci)` to both the Pacific and Atlantic oceans.",
    "defaultCode": {
      "javascript": "function pacificAtlantic(heights) {\n  // Write your code here\n};",
      "python": "from typing import List\n\nclass Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        # Write your code here\n        pass",
      "java": "import java.util.List;\n\nclass Solution {\n    public List<List<Integer>> pacificAtlantic(int[][] heights) {\n        // Write your code here\n        return null;\n    }\n}",
      "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    std::vector<std::vector<int>> pacificAtlantic(std::vector<std::vector<int>>& heights) {\n        // Write your code here\n        return {};\n    }\n};"
    }
  },
  {
    "id": 51,
    "title": "Design Add and Search Words Data Structure",
    "difficulty": "Medium",
    "tags": ["Trie", "Design", "String", "DFS"],
    "status": "To Do",
    "companies": ["Amazon", "Meta", "Google"],
    "description": "Design a data structure that supports adding new words and finding if a string matches any previously added string.\n\nImplement the WordDictionary class:\n- `WordDictionary()` Initializes the object.\n- `void addWord(word)` Adds `word` to the data structure, it can be matched later.\n- `bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots '.' where dots can be matched with any letter.",
    "defaultCode": {
      "javascript": "var WordDictionary = function() {\n    \n};\n\nWordDictionary.prototype.addWord = function(word) {\n    \n};\n\nWordDictionary.prototype.search = function(word) {\n    \n};\n",
      "python": "class WordDictionary:\n\n    def __init__(self):\n        pass\n\n    def addWord(self, word: str) -> None:\n        pass\n\n    def search(self, word: str) -> bool:\n        pass\n",
      "java": "class WordDictionary {\n\n    public WordDictionary() {\n        \n    }\n    \n    public void addWord(String word) {\n        \n    }\n    \n    public boolean search(String word) {\n        return false;\n    }\n}",
      "cpp": "#include <string>\n\nclass WordDictionary {\npublic:\n    WordDictionary() {\n        \n    }\n    \n    void addWord(std::string word) {\n        \n    }\n    \n    bool search(std::string word) {\n        return false;\n    }\n};"
    }
  }
]
